@inject UseCases.UseCaseInterfaces.IGetProductByIdUseCase GetProductByIdUseCase
@inject UseCases.UseCaseInterfaces.ISellProductUseCase SellProductUseCase
@if(productToSell != null)
{
    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger">@errorMessage</div>

    }
    <EditForm Model="productToSell" OnValidSubmit="SellProduct">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <ValidationSummary></ValidationSummary>

  
        <div class="form-group">
            <label for="name">Product Name</label>
            <input class="form-control" readonly value="@productToSell.Name" />
        </div>
        <div class="form-group">
            <label for="price">Price</label>
            <input class ="form-control" id="price" type="text" readonly value="@(string.Format("{0:c}", productToSell.Price))" />
        </div>
        <div class="form-group">
            <label for="qty">Quantity</label>
            <InputNumber id="qty" @bind-Value="@productToSell.Quantity" class="form-control"></InputNumber>
        </div>
        <div class="form-group">
            <label for="f-name">First Name</label>
            <input type="text" id="f-name" @bind="productToSell.FirstName" class="form-control" />
        </div>

        <div class="form-group">
            <label for="l-name">Last Name</label>
            <input type="text" id="l-name" @bind="productToSell.LastName" class="form-control" />
        </div>
        <div class="form-group">
            <label for="address">Address</label>
            <input type="text" id="address" @bind="productToSell.Address" class="form-control" />
        </div>
        <div class="form-group">
            <label for="city">City</label>
            <input type="text" id="city" @bind="productToSell.City" class="form-control" />
        </div>
        <div class="form-group">
            <label for="postalCode">Postal code</label>
            <input type="text" id="postalCode" @bind="@productToSell.PostalCode" class="form-control"></input>
        </div>
        <div class="form-group">
            <label for="phone">Phone number</label>
            <input type="text" id="phone" @bind="@productToSell.Phone" class="form-control"></input>
        </div>
       
        

        <br/>
        <button type="submit" class="btn btn-primary">Sell</button>



    </EditForm>
    <br />
   
   
}


@code {
    private Product productToSell;
    private string errorMessage;
    [Parameter]
    public string CashierName { get; set; }
    [Parameter]
    public Product  SelectedProduct { get; set; }
    [Parameter]
    public EventCallback<Product> OnProductSold { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        if(SelectedProduct != null)
        {


            productToSell = new Product
            {
                ProductId = SelectedProduct.ProductId,
                Name = SelectedProduct.Name,
                CategoryId = SelectedProduct.CategoryId,
                Price = SelectedProduct.Price,
                Points = SelectedProduct.Points,
                Address = SelectedProduct.Address,
                City = SelectedProduct.City,
                PostalCode = SelectedProduct.PostalCode,
                FirstName = SelectedProduct.FirstName,
                LastName= SelectedProduct.LastName,
                Phone = SelectedProduct.Phone,
                Quantity = 0,
                UserId = SelectedProduct.UserId

            };
        }
        else
        {
            productToSell = null;
        }
    }
    private void SellProduct()
    {
        if (string.IsNullOrEmpty(CashierName))
        {
            errorMessage="The Cashier's name is missing";
            return;
        }
        var product = GetProductByIdUseCase.Execute(productToSell.ProductId);
        if (productToSell.Quantity <= 0)
        {

            errorMessage = "The quantity has to be greater than zero ";
        }
        else if(product.Quantity >= productToSell.Quantity)
        {
          

            OnProductSold.InvokeAsync(productToSell);
            errorMessage = string.Empty;
            SellProductUseCase.Execute(CashierName, productToSell.ProductId, productToSell.Quantity.Value, productToSell.Points.Value, productToSell.Address, productToSell.City, productToSell.FirstName, productToSell.LastName, productToSell.PostalCode, productToSell.Phone, productToSell.UserId);
        }
      
        else
        {
            errorMessage = $"{product.Name}  only has {product.Quantity} left. It is not enough.";
        }

    }
}
