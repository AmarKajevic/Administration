@using Microsoft.AspNetCore.Identity;
@using System.Security.Claims


@inject UseCases.UseCaseInterfaces.IGetTodayTransactionUseCase GetTodayTransactionUseCase
@inject Administration.Data.AccountContext  _accountContext
@inject AuthenticationStateProvider authenticationStateProvider
@inject Administration.ApplicationUser appliactionUser
@inject Administration.Services.PointsService pointsService



@if (transactions != null && appliactionUser != null)

{

    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Korisnik</th>
                 <th></th>
                <th>Produkt</th>
                <th>Datum</th>
                <th>Prodata Kolicina</th>
                <th></th>
                <th>Licni bodovi</th>

               
                <th>Prodato</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tran in transactions)
            {
                <tr>
                    <td>@tran.CashierName</td>
                    <td></td>
                    <td>@tran.ProductName</td>
                    <td>@tran.TimeStamp.ToString("MM/dd hh:mm")</td>
                    <td>@tran.SoldQty</td>
                    
                    <td>@(tran.Points * tran.SoldQty)</td>
  
                    <td></td> 
                    <td>@(string.Format("€{0}", tran.SoldQty * tran.Price))</td>

                </tr>
            }
            <tr>
                <td colspan="2">&nbsp;</td>

                <td style="text-align:right">
                    <b> Ukupni Licni Bodovi:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        @(@transactions.Sum(x => x.PersonalPoints * x.SoldQty  ))
                    </b>

                </td>
                <td style="text-align:right">
                    <b> Ukupni Bodovi:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        
                         @(transactions != null && user != null ? transactions.Sum(x => x.PersonalPoints * x.SoldQty) + user.Points : 0)
                    </b>

                </td>
                <td style="text-align:right">
                    <b> Ukupna cena:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        @(string.Format("€{0}", @transactions.Sum(x => x.Price * x.SoldQty)))
                    </b>

                </td>

            </tr>
        </tbody>
    </table>
}


@code {
    private ApplicationUser user;
       protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateProvider.GetAuthenticationStateAsync();
        var userId = authState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        user = await _accountContext.Users.FindAsync(userId);
    }

    private IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionUseCase.Execute(cashierName);
        StateHasChanged();
    }
    public async Task AddPointsAfterTransaction(string userId, int pointsToAdd)
    {
        var user = await _accountContext.Users.FindAsync(userId);
        if (user != null)
        {
            user.Points += pointsToAdd;
            _accountContext.Users.Update(user);
            await _accountContext.SaveChangesAsync();
        }
    }
    

    
}
