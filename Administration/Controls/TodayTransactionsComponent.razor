@inject UseCases.UseCaseInterfaces.IGetTodayTransactionUseCase GetTodayTransactionUseCase

@if (transactions != null)
{

    <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Cashier Name</th>
                <th>Product Name</th>
                <th>Date Time</th>
                <th>Qty Sold</th>
                <th>Address</th>
                <th>Personal Points</th>
                <th>General Points</th>
                <th>Sold Amt</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tran in transactions)
            {
                <tr>
                    <td>@tran.CashierName</td>
                    <td>@tran.ProductName</td>
                    <td>@tran.TimeStamp.ToString("MM/dd hh:mm")</td>
                    <td>@tran.SoldQty</td>
                    <td>@tran.Address</td>
                    <td>@(tran.Points * tran.SoldQty)</td>
                    <td>@(tran.Points * tran.SoldQty)</td>
                    <td>@(string.Format("€{0}", tran.SoldQty * tran.Price))</td>

                </tr>
            }
            <tr>
                <td colspan="2">&nbsp;</td>

                <td style="text-align:right">
                    <b> total Personal Points:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        @(@transactions.Sum(x => x.PersonalPoints * x.SoldQty))
                    </b>

                </td>
                <td style="text-align:right">
                    <b> Total General Points:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        @(@transactions.Sum(x => x.GeneralPoints  + x.PersonalPoints * x.SoldQty))
                    </b>

                </td>
                <td style="text-align:right">
                    <b> Grand Total:</b>
                </td>
                <td style="text-align:right">
                    <b>
                        @(string.Format("€{0}", @transactions.Sum(x => x.Price * x.SoldQty)))
                    </b>

                </td>

            </tr>
        </tbody>
    </table>
}


@code {
    private IEnumerable<Transaction> transactions;

    public void LoadTransactions(string cashierName)
    {
        transactions = GetTodayTransactionUseCase.Execute(cashierName);
        StateHasChanged();
    }
}
