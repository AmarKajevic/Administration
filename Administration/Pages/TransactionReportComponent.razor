@page "/transactions"
@attribute [Authorize(Policy = "AdminOnly")]
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity;
@using Microsoft.EntityFrameworkCore;

@inject IJSRuntime JSRuntime
@inject UseCases.UseCaseInterfaces.IGetTransactionsUseCase GetTransactionsUseCase
@inject UseCases.DataStorePluginInterfaces.ITransactionRepository TransactionRepository
@inject Administration.Services.PointsService pointsService
@inject AuthenticationStateProvider authenticationStateProvider
@inject Plugins.DataStore.SQL.MarketContext _marketContext
@inject Administration.Data.AccountContext  _accountContext

<div class="row">
    <div class="col-2">
        <label for="cashier">Korisnicko ime</label>
        <input type="text" id="cashier" class="form-control" @bind-value="cashierName"/>
    </div>
    <div class="col-3">
        <label for="startdate">Datum transakcije</label>
        <input type="date" id="startdate" class="form-control" @bind-value="startDate" />
        </div>
    <div class="col-3">
        <label for="enddate">Kraj meseca</label>
        <input type="date" id="enddate" class="form-control" @bind-value="endDate" />
    </div>
    <div class="col-2">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="LoadTransactions">Pretrazi transakcije</button>
    </div>
    <div class="col-2">
        <label>&nbsp;</label>
        <button type="button" class="btn btn-primary form-control" @onclick="PrintReport">Odstampaj</button>
    </div>
    
</div>
<br/>
@if (transactions != null)
{
    <div id="printarea">
        <table class="table table-dark table-striped">
        <thead>
            <tr>
                <th>Vreme transakcije</th>
                <th>Korisnik</th>
                <th>Produkt</th>    
                <th>Ime proucioca</th>
                <th>prezime proucioca</th>
                <th>Adresa</th>
                <th>Grad</th>
                <th>Postanski broj</th>
                <th>Mobilni broj</th>
                <th>Kolicina</th>
                <th>Licni bodovi</th>
                <th>Korisnicki bodovi</th>
                <th>Cena</th>
                <th>Ukupna cena</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var tran in transactions)
            {
                <tr>
                    <td>@tran.TimeStamp.ToString("yyyy-MM-dd hh:mm")</td>
                    <td>@tran.CashierName</td>
                    <td>@tran.ProductName</td>
                    <td>@tran.FirstName</td>
                    <td>@tran.LastName</td>
                    <td>@tran.Address</td>
                    <td>@tran.City</td>
                    <td>@tran.PostalCode</td>
                    <td>@tran.Phone</td>
                    <td>@tran.SoldQty</td>
                    <td>@tran.PersonalPoints</td>
                    <td>@userPoints[tran.CashierName]</td>
                    <td style="text-align:right">@(string.Format("€{0}", tran.Price))</td>
                    <td style="text-align:right">@(string.Format("€{0}", tran.SoldQty * tran.Price))</td>
                        <td>  <button type="button" class="btn btn-link" @onclick="@(() => DeleteTransaction(@tran.TransactionId ))">Delete</button></td>

                </tr>
            }
            <tr>
                <td colspan="11">&nbsp;</td>
               
                    <td style="text-align:right">
                        <b> Ukupni Licni Bodovi:</b>
                    </td>
                    <td style="text-align:right">
                        <b>
                            @( @transactions.Sum(x => x.PersonalPoints ))
                        </b>

                    </td>
                    
                    <td style="text-align:right">
                        <b> Ukupno:</b>
                    </td>
                    <td style="text-align:right">
                        <b>
                            @(string.Format("€{0}", @transactions.Sum(x => x.Price * x.SoldQty)))
                        </b>

                    </td>

            </tr>
        </tbody>
        <tfoot>

        </tfoot>
    </table>
    
    </div>
}


@code {
    private string cashierName;
    private DateTime startDate;
    private DateTime endDate;
    private IEnumerable<Transaction> transactions;
    private TodayTransactionsComponent transactionComponent;
    private AuthenticationState authState;
    private Dictionary<string, int> userPoints;
        
    protected override async Task OnInitializedAsync()
    {
        base.OnInitialized();

        startDate = DateTime.Today;
        endDate = new DateTime(startDate.Year, startDate.Month, 1).AddMonths(1);
        var users = await _accountContext.Users.AsNoTracking().ToListAsync();

    // Napravite rečnik gde je ključ ime korisnika, a vrednost su njegovi poeni
    userPoints = users.ToDictionary(u => u.UserName, u => u.Points);
    }

    private void LoadTransactions()
    {
        transactions = GetTransactionsUseCase.Execute(cashierName, startDate, endDate);
    

    }
    private void PrintReport()
    {
        JSRuntime.InvokeVoidAsync("print");

    }
   
    @* private  void DeleteTransaction(int transactionId)
{

   

    TransactionRepository.DeleteTransaction(transactionId);
    LoadTransactions();
} *@


private async Task DeleteTransaction(int transactionId)
{
    var transaction = await _marketContext.Transactions.FindAsync(transactionId);
    if (transaction != null)
    {
        var userId = transaction.UserId;
        await DeletePointsToRecommenders(userId, transaction.Points);
        _marketContext.Transactions.Remove(transaction);
        TransactionRepository.DeleteTransaction(transactionId);
        await _marketContext.SaveChangesAsync();
        
    }
}

private async Task DeletePointsToRecommenders(string recommenderId, int pointsToAdd)
{
    var recommender = await _accountContext.Users.FindAsync(recommenderId);
    if (recommender != null)
    {
        await pointsService.RemovePointsAfterTransaction(recommenderId, pointsToAdd);
         if (!string.IsNullOrEmpty(recommender.RecommenderId))
            {
                await DeletePointsToRecommenders(recommender.RecommenderId, pointsToAdd);
            }
    }
}
private async Task<int> GetUserPointsAsync(string username)
{
    var user = await _accountContext.Users.AsNoTracking().FirstOrDefaultAsync(u => u.UserName == username);
    return user?.Points ?? 0;
}
   

}
