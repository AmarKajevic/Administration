@page "/cashier_console"
@using Microsoft.AspNetCore.Identity;
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims


@attribute [Authorize(Policy = "CashierOnly")]
@inject NavigationManager NavigationManager

@inject IJSRuntime JSRuntime
@inject AuthenticationStateProvider authenticationStateProvider
@inject UserManager<IdentityUser> UserManager



@if (!string.IsNullOrEmpty(cashierName))
{
    <div class="row">
        <div class="col-5">
            <h3>Cashier's Console</h3>
        </div>
        <div class="col-2">
            <button class="btn btn-primary" @onclick="recommendationLink">Invite others</button>
        </div>
        <div class="col-2"><label for=" cashier">Cashier Name: </label></div>
        <div class="col-3">
            <div class="form-group">

                <input type="text" id="cashier" class="form-control" @bind-value="cashierName" />
            </div>
        </div>
    </div>



    <br />

    <br />
    <div class="row">
        <div class="col-4">
            <SelectProductForSellingComponent OnProductSelected="SelectProduct"></SelectProductForSellingComponent>
            <br />
            <SellProductComponent CashierName="@cashierName"
                                  SelectedProduct="selectedProduct"
                                  OnProductSold="SellProduct"></SellProductComponent>
        </div>
        <div class="col-8">
            <TodayTransactionsComponent @ref="transactionComponent"></TodayTransactionsComponent>
        </div>
    </div>
}

@code {
    private TodayTransactionsComponent transactionComponent;


    private Product selectedProduct;
    private string cashierName;
    private Transaction selectedTransaction;
    [CascadingParameter]
    private Task<AuthenticationState> _authState { get; set; }

    private AuthenticationState authState;

    protected override async Task OnInitializedAsync()
    {
        authState = await _authState;
        cashierName = authState.User.Identity.Name;
    }


    protected override void OnInitialized()
    {
        base.OnInitialized();

    }
    protected override void OnAfterRender(bool firstRender)
    {
        base.OnAfterRender(firstRender);
        if (firstRender)
        {
            transactionComponent.LoadTransactions(cashierName);

        }
    }


    private void SelectProduct(Product product)
    {
        selectedProduct = product;

    }
    private void SelectTransaction(Transaction transaction)
    {
        selectedTransaction = transaction;
    }
    private void SellProduct(Product product)
    {
        transactionComponent.LoadTransactions(cashierName);

    }
    //private async Task recommendationLink()
    //{
    //    var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
    //    var currentUserId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;

    //    //string userHash = authState.User.Identity.Name;
    //    //string invitationLink = $"/Identity/Account/Register?hash={userHash}";
    //    //string script = $"window.open('{invitationLink}', '_blank');";
    //    //JSRuntime.InvokeVoidAsync("eval", script);
    //}
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private async Task recommendationLink()
    {

        var authenticationState = await authenticationStateTask;
        var currentUserId = authenticationState.User.FindFirst(ClaimTypes.NameIdentifier)?.Value;
        var uniqueIdentifier = currentUserId;
        string invitationLink = $"/Identity/Account/Register?hash={uniqueIdentifier}";
        string script = $"window.open('{invitationLink}', '_blank');";
        await JSRuntime.InvokeVoidAsync("eval", script);


        Console.WriteLine($"Trenutni korisnik: {currentUserId}");

    }


}
